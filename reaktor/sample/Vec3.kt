// automatically generated by the FlatBuffers compiler, do not modify

package reaktor.sample

import com.google.flatbuffers.kotlin.*
import kotlin.jvm.JvmInline
@Suppress("unused")
class Vec3 : Struct() {

    fun init(i: Int, buffer: ReadWriteBuffer) : Vec3 = reset(i, buffer)

    val x : Float get() = bb.getFloat(bufferPos + 0)

    val y : Float get() = bb.getFloat(bufferPos + 4)

    val z : Float get() = bb.getFloat(bufferPos + 8)

    companion object {

        fun createVec3(builder: FlatBufferBuilder, x: Float, y: Float, z: Float) : Offset<Vec3> {
            builder.prep(4, 12)
            builder.put(z)
            builder.put(y)
            builder.put(x)
            return Offset(builder.offset())
        }
    }
}

typealias Vec3OffsetArray = OffsetArray<Vec3>

inline fun Vec3OffsetArray(size: Int, crossinline call: (Int) -> Offset<Vec3>): Vec3OffsetArray =
    Vec3OffsetArray(IntArray(size) { call(it).value })
